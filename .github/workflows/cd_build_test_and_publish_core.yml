name: '[CD] [Core] build, test & publish'
on: 
  workflow_dispatch:
    inputs:
      version:
        description: |
          # Specify the project version format:
            major.minor.patch[-rc|beta|alpha].X  
        required: true
        default: '0.0.0'
env:  
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
jobs:
  build-core:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        configurations: [Debug, Release]
        platforms: [AnyCPU, x64]
    name: '[Core] build ${{ matrix.configurations }} on ${{ matrix.os }}[${{ matrix.platforms }}]'
    runs-on: ${{ matrix.os }}
    steps: 
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1   
      with:
        dotnet-version: '5.0.x'
    - name: '[Core] build ${{ matrix.configurations }}'
      run: |
        dotnet build src/Exomia.Vulkan.Api.Core --configuration ${{ matrix.configurations }} --force --nologo -p:Platform=${{ matrix.platforms }}
  test-core:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        configurations: [Debug, Release]
        platforms: [AnyCPU, x64]
    name: '[Core] test ${{ matrix.configurations }} on ${{ matrix.os }}[${{ matrix.platforms }}]'
    needs: [build-core]
    runs-on: ${{ matrix.os }}
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1   
      with:
        dotnet-version: '5.0.x'
    - name: '[Core] test ${{ matrix.configurations }}'
      run: |
        dotnet test tests/L0/Exomia.Vulkan.Api.Core.Tests --configuration ${{ matrix.configurations }} --nologo -p:Platform=${{ matrix.platforms }}
  publish-core-on-github:
    strategy:
      matrix:
        platforms: [AnyCPU, x64]
    name: '[Core] publish debug on github [v${{ github.event.inputs.version }}][${{ matrix.platforms }}]'
    needs: [test-core]
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1   
      with:
        dotnet-version: '5.0.x'
    - name: publish ${{ github.repository }} [v${{ github.event.inputs.version }}]
      run: |
        dotnet pack --configuration Debug --verbosity m --force --nologo -p:Platform=${{ matrix.platforms }} -p:Version=${{ github.event.inputs.version }}
        for f in ./*.nupkg
           do
             STATUSCODE=$(curl -sSX PUT --retry 3 -o /dev/null -w "%{http_code}" -u "${{ github.repository_owner }}:${{ github.token }}" -F package=@$f https://nuget.pkg.github.com/${{ github.repository_owner }}/)
             echo "[$STATUSCODE:https://nuget.pkg.github.com/${{ github.repository_owner }}/] $f"
             if [ "${STATUSCODE}" != 200 ] && [ "${STATUSCODE}" != 409 ]; then exit 1; fi
           done
      shell: bash
      working-directory: src/Exomia.Vulkan.Api.Core
  publish-core-on-nuget:
    strategy:
      matrix:
        platforms: [AnyCPU, x64]
    name: '[Core] publish release on nuget [v${{ github.event.inputs.version }}][${{ matrix.platforms }}]'
    needs: [test-core, publish-core-on-github]
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1   
      with:
        dotnet-version: '5.0.x'
    - name: publish ${{ github.repository }} [v${{ github.event.inputs.version }}]
      run: |
        dotnet pack --configuration Release --verbosity m --force --nologo -p:Platform=${{ matrix.platforms }} -p:Version=${{ github.event.inputs.version }}
        dotnet nuget push **/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.EXOMIA_NUGET_API_KEY_PUSH }} --skip-duplicate
      shell: bash
      working-directory: src/Exomia.Vulkan.Api.Core
